(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{371:function(e,t,a){"use strict";a.r(t);var n=a(45),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"第-13-章-concurrency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-13-章-concurrency"}},[e._v("#")]),e._v(" 第 13 章 Concurrency")]),e._v(" "),a("p",[e._v("by Brett L. Schuchert")]),e._v(" "),a("p",[a("img",{attrs:{src:"figures/ch13/13_1fig_martin.jpg",alt:""}})]),e._v(" "),a("p",[e._v("“Objects are abstractions of processing. Threads are abstractions of schedule.”")]),e._v(" "),a("p",[e._v("—James O. Coplien1")]),e._v(" "),a("ol",[a("li",[e._v("Private correspondence.")])]),e._v(" "),a("p",[e._v("Writing clean concurrent programs is hard—very hard. It is much easier to write code that executes in a single thread. It is also easy to write multithreaded code that looks fine on the surface but is broken at a deeper level. Such code works fine until the system is placed under stress.")]),e._v(" "),a("p",[e._v("In this chapter we discuss the need for concurrent programming, and the difficulties it presents. We then present several recommendations for dealing with those difficulties, and writing clean concurrent code. Finally, we conclude with issues related to testing concurrent code.")]),e._v(" "),a("p",[e._v("Clean Concurrency is a complex topic, worthy of a book by itself. Our strategy in this book is to present an overview here and provide a more detailed tutorial in “Concurrency II” on page 317. If you are just curious about concurrency, then this chapter will suffice for you now. If you have a need to understand concurrency at a deeper level, then you should read through the tutorial as well.")]),e._v(" "),a("p",[e._v("WHY CONCURRENCY?\nConcurrency is a decoupling strategy. It helps us decouple what gets done from when it gets done. In single-threaded applications what and when are so strongly coupled that the state of the entire application can often be determined by looking at the stack backtrace. A programmer who debugs such a system can set a breakpoint, or a sequence of breakpoints, and know the state of the system by which breakpoints are hit.")]),e._v(" "),a("p",[e._v("Decoupling what from when can dramatically improve both the throughput and structures of an application. From a structural point of view the application looks like many little collaborating computers rather than one big main loop. This can make the system easier to understand and offers some powerful ways to separate concerns.")]),e._v(" "),a("p",[e._v("Consider, for example, the standard “Servlet” model of Web applications. These systems run under the umbrella of a Web or EJB container that partially manages concurrency for you. The servlets are executed asynchronously whenever Web requests come in. The servlet programmer does not have to manage all the incoming requests. In principle, each servlet execution lives in its own little world and is decoupled from all the other servlet executions.")]),e._v(" "),a("p",[e._v("Of course if it were that easy, this chapter wouldn’t be necessary. In fact, the decoupling provided by Web containers is far less than perfect. Servlet programmers have to be very aware, and very careful, to make sure their concurrent programs are correct. Still, the structural benefits of the servlet model are significant.")]),e._v(" "),a("p",[e._v("But structure is not the only motive for adopting concurrency. Some systems have response time and throughput constraints that require hand-coded concurrent solutions. For example, consider a single-threaded information aggregator that acquires information from many different Web sites and merges that information into a daily summary. Because this system is single threaded, it hits each Web site in turn, always finishing one before starting the next. The daily run needs to execute in less than 24 hours. However, as more and more Web sites are added, the time grows until it takes more than 24 hours to gather all the data. The single-thread involves a lot of waiting at Web sockets for I/O to complete. We could improve the performance by using a multithreaded algorithm that hits more than one Web site at a time.")]),e._v(" "),a("p",[e._v("Or consider a system that handles one user at a time and requires only one second of time per user. This system is fairly responsive for a few users, but as the number of users increases, the system’s response time increases. No user wants to get in line behind 150 others! We could improve the response time of this system by handling many users concurrently.")]),e._v(" "),a("p",[e._v("Or consider a system that interprets large data sets but can only give a complete solution after processing all of them. Perhaps each data set could be processed on a different computer, so that many data sets are being processed in parallel.")]),e._v(" "),a("p",[e._v("Myths and Misconceptions\nAnd so there are compelling reasons to adopt concurrency. However, as we said before, concurrency is hard. If you aren’t very careful, you can create some very nasty situations. Consider these common myths and misconceptions:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Concurrency always improves performance.\nConcurrency can sometimes improve performance, but only when there is a lot of wait time that can be shared between multiple threads or multiple processors. Neither situation is trivial.")])]),e._v(" "),a("li",[a("p",[e._v("Design does not change when writing concurrent programs.\nIn fact, the design of a concurrent algorithm can be remarkably different from the design of a single-threaded system. The decoupling of what from when usually has a huge effect on the structure of the system.")])]),e._v(" "),a("li",[a("p",[e._v("Understanding concurrency issues is not important when working with a container such as a Web or EJB container.\nIn fact, you’d better know just what your container is doing and how to guard against the issues of concurrent update and deadlock described later in this chapter.")])])]),e._v(" "),a("p",[e._v("Here are a few more balanced sound bites regarding writing concurrent software:")]),e._v(" "),a("ul",[a("li",[e._v("Concurrency incurs some overhead, both in performance as well as writing additional code.")]),e._v(" "),a("li",[e._v("Correct concurrency is complex, even for simple problems.")]),e._v(" "),a("li",[e._v("Concurrency bugs aren’t usually repeatable, so they are often ignored as one-offs2 instead of the true defects they are.")])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Cosmic-rays, glitches, and so on.")])]),e._v(" "),a("ul",[a("li",[e._v("Concurrency often requires a fundamental change in design strategy.")])]),e._v(" "),a("p",[e._v("CHALLENGES\nWhat makes concurrent programming so difficult? Consider the following trivial class:")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[e._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("X")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" lastIdUsed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getNextId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n           "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v("lastIdUsed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Let’s say we create an instance of X, set the lastIdUsed field to 42, and then share the instance between two threads. Now suppose that both of those threads call the method getNextId(); there are three possible outcomes:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Thread one gets the value 43, thread two gets the value 44, lastIdUsed is 44.")])]),e._v(" "),a("li",[a("p",[e._v("Thread one gets the value 44, thread two gets the value 43, lastIdUsed is 44.")])]),e._v(" "),a("li",[a("p",[e._v("Thread one gets the value 43, thread two gets the value 43, lastIdUsed is 43.")])])]),e._v(" "),a("p",[e._v("The surprising third result3 occurs when the two threads step on each other. This happens because there are many possible paths that the two threads can take through that one line of Java code, and some of those paths generate incorrect results. How many different paths are there? To really answer that question, we need to understand what the Just-In-Time Compiler does with the generated byte-code, and understand what the Java memory model considers to be atomic.")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("See “Digging Deeper” on page 323.")])]),e._v(" "),a("p",[e._v("A quick answer, working with just the generated byte-code, is that there are 12,870 different possible execution paths4 for those two threads executing within the getNextId method. If the type of lastIdUsed is changed from int to long, the number of possible paths increases to 2,704,156. Of course most of those paths generate valid results. The problem is that some of them don’t.")]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("See “Possible Paths of Execution” on page 321.")])]),e._v(" "),a("p",[e._v("CONCURRENCY DEFENSE PRINCIPLES\nWhat follows is a series of principles and techniques for defending your systems from the problems of concurrent code.")]),e._v(" "),a("p",[e._v("Single Responsibility Principle\nThe SRP5 states that a given method/class/component should have a single reason to change. Concurrency design is complex enough to be a reason to change in it’s own right and therefore deserves to be separated from the rest of the code. Unfortunately, it is all too common for concurrency implementation details to be embedded directly into other production code. Here are a few things to consider:")]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[e._v("[PPP]")])]),e._v(" "),a("ul",[a("li",[e._v("Concurrency-related code has its own life cycle of development, change, and tuning.")]),e._v(" "),a("li",[e._v("Concurrency-related code has its own challenges, which are different from and often more difficult than nonconcurrency-related code.")]),e._v(" "),a("li",[e._v("The number of ways in which miswritten concurrency-based code can fail makes it challenging enough without the added burden of surrounding application code.")])]),e._v(" "),a("p",[e._v("Recommendation: Keep your concurrency-related code separate from other code.6")]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[e._v("See “Client/Server Example” on page 317.")])]),e._v(" "),a("p",[e._v("Corollary: Limit the Scope of Data\nAs we saw, two threads modifying the same field of a shared object can interfere with each other, causing unexpected behavior. One solution is to use the synchronized keyword to protect a critical section in the code that uses the shared object. It is important to restrict the number of such critical sections. The more places shared data can get updated, the more likely:")]),e._v(" "),a("ul",[a("li",[e._v("You will forget to protect one or more of those places—effectively breaking all code that modifies that shared data.")]),e._v(" "),a("li",[e._v("There will be duplication of effort required to make sure everything is effectively guarded (violation of DRY7).")])]),e._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[e._v("[PRAG].")])]),e._v(" "),a("ul",[a("li",[e._v("It will be difficult to determine the source of failures, which are already hard enough to find.")])]),e._v(" "),a("p",[e._v("Recommendation: Take data encapsulation to heart; severely limit the access of any data that may be shared.")]),e._v(" "),a("p",[e._v("Corollary: Use Copies of Data\nA good way to avoid shared data is to avoid sharing the data in the first place. In some situations it is possible to copy objects and treat them as read-only. In other cases it might be possible to copy objects, collect results from multiple threads in these copies and then merge the results in a single thread.")]),e._v(" "),a("p",[e._v("If there is an easy way to avoid sharing objects, the resulting code will be far less likely to cause problems. You might be concerned about the cost of all the extra object creation. It is worth experimenting to find out if this is in fact a problem. However, if using copies of objects allows the code to avoid synchronizing, the savings in avoiding the intrinsic lock will likely make up for the additional creation and garbage collection overhead.")]),e._v(" "),a("p",[e._v("Corollary: Threads Should Be as Independent as Possible\nConsider writing your threaded code such that each thread exists in its own world, sharing no data with any other thread. Each thread processes one client request, with all of its required data coming from an unshared source and stored as local variables. This makes each of those threads behave as if it were the only thread in the world and there were no synchronization requirements.")]),e._v(" "),a("p",[e._v("For example, classes that subclass from HttpServlet receive all of their information as parameters passed in to the doGet and doPost methods. This makes each Servlet act as if it has its own machine. So long as the code in the Servlet uses only local variables, there is no chance that the Servlet will cause synchronization problems. Of course, most applications using Servlets eventually run into shared resources such as database connections.")]),e._v(" "),a("p",[e._v("Recommendation: Attempt to partition data into independent subsets than can be operated on by independent threads, possibly in different processors.")]),e._v(" "),a("p",[e._v("KNOW YOUR LIBRARY\nJava 5 offers many improvements for concurrent development over previous versions. There are several things to consider when writing threaded code in Java 5:")]),e._v(" "),a("ul",[a("li",[e._v("Use the provided thread-safe collections.")]),e._v(" "),a("li",[e._v("Use the executor framework for executing unrelated tasks.")]),e._v(" "),a("li",[e._v("Use nonblocking solutions when possible.")]),e._v(" "),a("li",[e._v("Several library classes are not thread safe.")])]),e._v(" "),a("p",[e._v("Thread-Safe Collections\nWhen Java was young, Doug Lea wrote the seminal book8 Concurrent Programming in Java. Along with the book he developed several thread-safe collections, which later became part of the JDK in the java.util.concurrent package. The collections in that package are safe for multithreaded situations and they perform well. In fact, the ConcurrentHashMap implementation performs better than HashMap in nearly all situations. It also allows for simultaneous concurrent reads and writes, and it has methods supporting common composite operations that are otherwise not thread safe. If Java 5 is the deployment environment, start with ConcurrentHashMap.")]),e._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[e._v("[Lea99].")])]),e._v(" "),a("p",[e._v("There are several other kinds of classes added to support advanced concurrency design. Here are a few examples:")]),e._v(" "),a("p",[a("img",{attrs:{src:"figures/ch13/t0183-01.jpg",alt:""}})]),e._v(" "),a("p",[e._v("Recommendation: Review the classes available to you. In the case of Java, become familiar with java.util.concurrent, java.util.concurrent.atomic, java.util.concurrent.locks.")]),e._v(" "),a("p",[e._v("KNOW YOUR EXECUTION MODELS\nThere are several different ways to partition behavior in a concurrent application. To discuss them we need to understand some basic definitions.")]),e._v(" "),a("p",[a("img",{attrs:{src:"figures/ch13/t0183-02.jpg",alt:""}})]),e._v(" "),a("p",[e._v("Given these definitions, we can now discuss the various execution models used in concurrent programming.")]),e._v(" "),a("p",[e._v("Producer-Consumer9\n9. http://en.wikipedia.org/wiki/Producer-consumer")]),e._v(" "),a("p",[e._v("One or more producer threads create some work and place it in a buffer or queue. One or more consumer threads acquire that work from the queue and complete it. The queue between the producers and consumers is a bound resource. This means producers must wait for free space in the queue before writing and consumers must wait until there is something in the queue to consume. Coordination between the producers and consumers via the queue involves producers and consumers signaling each other. The producers write to the queue and signal that the queue is no longer empty. Consumers read from the queue and signal that the queue is no longer full. Both potentially wait to be notified when they can continue.")]),e._v(" "),a("p",[e._v("Readers-Writers10\n10. http://en.wikipedia.org/wiki/Readers-writers_problem")]),e._v(" "),a("p",[e._v("When you have a shared resource that primarily serves as a source of information for readers, but which is occasionally updated by writers, throughput is an issue. Emphasizing throughput can cause starvation and the accumulation of stale information. Allowing updates can impact throughput. Coordinating readers so they do not read something a writer is updating and vice versa is a tough balancing act. Writers tend to block many readers for a long period of time, thus causing throughput issues.")]),e._v(" "),a("p",[e._v("The challenge is to balance the needs of both readers and writers to satisfy correct operation, provide reasonable throughput and avoiding starvation. A simple strategy makes writers wait until there are no readers before allowing the writer to perform an update. If there are continuous readers, however, the writers will be starved. On the other hand, if there are frequent writers and they are given priority, throughput will suffer. Finding that balance and avoiding concurrent update issues is what the problem addresses.")]),e._v(" "),a("p",[e._v("Dining Philosophers11\n11. http://en.wikipedia.org/wiki/Dining_philosophers_problem")]),e._v(" "),a("p",[e._v("Imagine a number of philosophers sitting around a circular table. A fork is placed to the left of each philosopher. There is a big bowl of spaghetti in the center of the table. The philosophers spend their time thinking unless they get hungry. Once hungry, they pick up the forks on either side of them and eat. A philosopher cannot eat unless he is holding two forks. If the philosopher to his right or left is already using one of the forks he needs, he must wait until that philosopher finishes eating and puts the forks back down. Once a philosopher eats, he puts both his forks back down on the table and waits until he is hungry again.")]),e._v(" "),a("p",[e._v("Replace philosophers with threads and forks with resources and this problem is similar to many enterprise applications in which processes compete for resources. Unless carefully designed, systems that compete in this way can experience deadlock, livelock, throughput, and efficiency degradation.")]),e._v(" "),a("p",[e._v("Most concurrent problems you will likely encounter will be some variation of these three problems. Study these algorithms and write solutions using them on your own so that when you come across concurrent problems, you’ll be more prepared to solve the problem.")]),e._v(" "),a("p",[e._v("Recommendation: Learn these basic algorithms and understand their solutions.")]),e._v(" "),a("p",[e._v("BEWARE DEPENDENCIES BETWEEN SYNCHRONIZED METHODS\nDependencies between synchronized methods cause subtle bugs in concurrent code. The Java language has the notion of synchronized, which protects an individual method. However, if there is more than one synchronized method on the same shared class, then your system may be written incorrectly.12")]),e._v(" "),a("ol",{attrs:{start:"12"}},[a("li",[e._v("See “Dependencies Between Methods Can Break Concurrent Code” on page 329.")])]),e._v(" "),a("p",[e._v("Recommendation: Avoid using more than one method on a shared object.")]),e._v(" "),a("p",[e._v("There will be times when you must use more than one method on a shared object. When this is the case, there are three ways to make the code correct:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Client-Based Locking—Have the client lock the server before calling the first method and make sure the lock’s extent includes code calling the last method.")])]),e._v(" "),a("li",[a("p",[e._v("Server-Based Locking—Within the server create a method that locks the server, calls all the methods, and then unlocks. Have the client call the new method.")])]),e._v(" "),a("li",[a("p",[e._v("Adapted Server—create an intermediary that performs the locking. This is an example of server-based locking, where the original server cannot be changed.")])])]),e._v(" "),a("p",[e._v("KEEP SYNCHRONIZED SECTIONS SMALL\nThe synchronized keyword introduces a lock. All sections of code guarded by the same lock are guaranteed to have only one thread executing through them at any given time. Locks are expensive because they create delays and add overhead. So we don’t want to litter our code with synchronized statements. On the other hand, critical sections13 must be guarded. So we want to design our code with as few critical sections as possible.")]),e._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[e._v("A critical section is any section of code that must be protected from simultaneous use for the program to be correct.")])]),e._v(" "),a("p",[e._v("Some naive programmers try to achieve this by making their critical sections very large. However, extending synchronization beyond the minimal critical section increases contention and degrades performance.14")]),e._v(" "),a("ol",{attrs:{start:"14"}},[a("li",[e._v("See “Increasing Throughput” on page 333.")])]),e._v(" "),a("p",[e._v("Recommendation: Keep your synchronized sections as small as possible.")]),e._v(" "),a("p",[e._v("WRITING CORRECT SHUT-DOWN CODE IS HARD\nWriting a system that is meant to stay live and run forever is different from writing something that works for awhile and then shuts down gracefully.")]),e._v(" "),a("p",[e._v("Graceful shutdown can be hard to get correct. Common problems involve deadlock,15 with threads waiting for a signal to continue that never comes.")]),e._v(" "),a("ol",{attrs:{start:"15"}},[a("li",[e._v("See “Deadlock” on page 335.")])]),e._v(" "),a("p",[e._v("For example, imagine a system with a parent thread that spawns several child threads and then waits for them all to finish before it releases its resources and shuts down. What if one of the spawned threads is deadlocked? The parent will wait forever, and the system will never shut down.")]),e._v(" "),a("p",[e._v("Or consider a similar system that has been instructed to shut down. The parent tells all the spawned children to abandon their tasks and finish. But what if two of the children were operating as a producer/consumer pair. Suppose the producer receives the signal from the parent and quickly shuts down. The consumer might have been expecting a message from the producer and be blocked in a state where it cannot receive the shutdown signal. It could get stuck waiting for the producer and never finish, preventing the parent from finishing as well.")]),e._v(" "),a("p",[e._v("Situations like this are not at all uncommon. So if you must write concurrent code that involves shutting down gracefully, expect to spend much of your time getting the shutdown to happen correctly.")]),e._v(" "),a("p",[e._v("Recommendation: Think about shut-down early and get it working early. It’s going to take longer than you expect. Review existing algorithms because this is probably harder than you think.")]),e._v(" "),a("p",[e._v("TESTING THREADED CODE\nProving that code is correct is impractical. Testing does not guarantee correctness. However, good testing can minimize risk. This is all true in a single-threaded solution. As soon as there are two or more threads using the same code and working with shared data, things get substantially more complex.")]),e._v(" "),a("p",[e._v("Recommendation: Write tests that have the potential to expose problems and then run them frequently, with different programatic configurations and system configurations and load. If tests ever fail, track down the failure. Don’t ignore a failure just because the tests pass on a subsequent run.")]),e._v(" "),a("p",[e._v("That is a whole lot to take into consideration. Here are a few more fine-grained recommendations:")]),e._v(" "),a("ul",[a("li",[e._v("Treat spurious failures as candidate threading issues.")]),e._v(" "),a("li",[e._v("Get your nonthreaded code working first.")]),e._v(" "),a("li",[e._v("Make your threaded code pluggable.")]),e._v(" "),a("li",[e._v("Make your threaded code tunable.")]),e._v(" "),a("li",[e._v("Run with more threads than processors.")]),e._v(" "),a("li",[e._v("Run on different platforms.")]),e._v(" "),a("li",[e._v("Instrument your code to try and force failures.")])]),e._v(" "),a("p",[e._v("Treat Spurious Failures as Candidate Threading Issues\nThreaded code causes things to fail that “simply cannot fail.” Most developers do not have an intuitive feel for how threading interacts with other code (authors included). Bugs in threaded code might exhibit their symptoms once in a thousand, or a million, executions. Attempts to repeat the systems can be frustratingly. This often leads developers to write off the failure as a cosmic ray, a hardware glitch, or some other kind of “one-off.” It is best to assume that one-offs do not exist. The longer these “one-offs” are ignored, the more code is built on top of a potentially faulty approach.")]),e._v(" "),a("p",[e._v("Recommendation: Do not ignore system failures as one-offs.")]),e._v(" "),a("p",[e._v("Get Your Nonthreaded Code Working First\nThis may seem obvious, but it doesn’t hurt to reinforce it. Make sure code works outside of its use in threads. Generally, this means creating POJOs that are called by your threads. The POJOs are not thread aware, and can therefore be tested outside of the threaded environment. The more of your system you can place in such POJOs, the better.")]),e._v(" "),a("p",[e._v("Recommendation: Do not try to chase down nonthreading bugs and threading bugs at the same time. Make sure your code works outside of threads.")]),e._v(" "),a("p",[e._v("Make Your Threaded Code Pluggable\nWrite the concurrency-supporting code such that it can be run in several configurations:")]),e._v(" "),a("ul",[a("li",[e._v("One thread, several threads, varied as it executes")]),e._v(" "),a("li",[e._v("Threaded code interacts with something that can be both real or a test double.")]),e._v(" "),a("li",[e._v("Execute with test doubles that run quickly, slowly, variable.")]),e._v(" "),a("li",[e._v("Configure tests so they can run for a number of iterations.")])]),e._v(" "),a("p",[e._v("Recommendation: Make your thread-based code especially pluggable so that you can run it in various configurations.")]),e._v(" "),a("p",[e._v("Make Your Threaded Code Tunable\nGetting the right balance of threads typically requires trial an error. Early on, find ways to time the performance of your system under different configurations. Allow the number of threads to be easily tuned. Consider allowing it to change while the system is running. Consider allowing self-tuning based on throughput and system utilization.")]),e._v(" "),a("p",[e._v("Run with More Threads Than Processors\nThings happen when the system switches between tasks. To encourage task swapping, run with more threads than processors or cores. The more frequently your tasks swap, the more likely you’ll encounter code that is missing a critical section or causes deadlock.")]),e._v(" "),a("p",[e._v("Run on Different Platforms\nIn the middle of 2007 we developed a course on concurrent programming. The course development ensued primarily under OS X. The class was presented using Windows XP running under a VM. Tests written to demonstrate failure conditions did not fail as frequently in an XP environment as they did running on OS X.")]),e._v(" "),a("p",[e._v("In all cases the code under test was known to be incorrect. This just reinforced the fact that different operating systems have different threading policies, each of which impacts the code’s execution. Multithreaded code behaves differently in different environments.16 You should run your tests in every potential deployment environment.")]),e._v(" "),a("ol",{attrs:{start:"16"}},[a("li",[e._v("Did you know that the threading model in Java does not guarantee preemptive threading? Modern OS’s support preemptive threading, so you get that “for free.” Even so, it not guaranteed by the JVM.")])]),e._v(" "),a("p",[e._v("Recommendation: Run your threaded code on all target platforms early and often.")]),e._v(" "),a("p",[e._v("Instrument Your Code to Try and Force Failures\nIt is normal for flaws in concurrent code to hide. Simple tests often don’t expose them. Indeed, they often hide during normal processing. They might show up once every few hours, or days, or weeks!")]),e._v(" "),a("p",[e._v("The reason that threading bugs can be infrequent, sporadic, and hard to repeat, is that only a very few pathways out of the many thousands of possible pathways through a vulnerable section actually fail. So the probability that a failing pathway is taken can be star-tlingly low. This makes detection and debugging very difficult.")]),e._v(" "),a("p",[e._v("How might you increase your chances of catching such rare occurrences? You can instrument your code and force it to run in different orderings by adding calls to methods like Object.wait(), Object.sleep(), Object.yield() and Object.priority().")]),e._v(" "),a("p",[e._v("Each of these methods can affect the order of execution, thereby increasing the odds of detecting a flaw. It’s better when broken code fails as early and as often as possible.")]),e._v(" "),a("p",[e._v("There are two options for code instrumentation:")]),e._v(" "),a("ul",[a("li",[e._v("Hand-coded")]),e._v(" "),a("li",[e._v("Automated")])]),e._v(" "),a("p",[e._v("Hand-Coded\nYou can insert calls to wait(), sleep(), yield(), and priority() in your code by hand. It might be just the thing to do when you’re testing a particularly thorny piece of code.")]),e._v(" "),a("p",[e._v("Here is an example of doing just that:")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[e._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("synchronized")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("nextUrlOrNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" urlGenerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// inserted for testing.")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("updateHasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("The inserted call to yield() will change the execution pathways taken by the code and possibly cause the code to fail where it did not fail before. If the code does break, it was not because you added a call to yield().17 Rather, your code was broken and this simply made the failure evident.")]),e._v(" "),a("ol",{attrs:{start:"17"}},[a("li",[e._v("This is not strictly the case. Since the JVM does not guarantee preemptive threading, a particular algorithm might always work on an OS that does not preempt threads. The reverse is also possible but for different reasons.")])]),e._v(" "),a("p",[e._v("There are many problems with this approach:")]),e._v(" "),a("ul",[a("li",[e._v("You have to manually find appropriate places to do this.")]),e._v(" "),a("li",[e._v("How do you know where to put the call and what kind of call to use?")]),e._v(" "),a("li",[e._v("Leaving such code in a production environment unnecessarily slows the code down.")]),e._v(" "),a("li",[e._v("It’s a shotgun approach. You may or may not find flaws. Indeed, the odds aren’t with you.")])]),e._v(" "),a("p",[e._v("What we need is a way to do this during testing but not in production. We also need to easily mix up configurations between different runs, which results in increased chances of finding errors in the aggregate.")]),e._v(" "),a("p",[e._v("Clearly, if we divide our system up into POJOs that know nothing of threading and classes that control the threading, it will be easier to find appropriate places to instrument the code. Moreover, we could create many different test jigs that invoke the POJOs under different regimes of calls to sleep, yield, and so on.")]),e._v(" "),a("p",[e._v("Automated\nYou could use tools like an Aspect-Oriented Framework, CGLIB, or ASM to programmatically instrument your code. For example, you could use a class with a single method:")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[e._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadJigglePoint")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("jiggle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("You can add calls to this in various places within your code:")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[e._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("synchronized")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("nextUrlOrNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadJiglePoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("jiggle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" url "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" urlGenerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadJiglePoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("jiggle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n         "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("updateHasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ThreadJiglePoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("jiggle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" \n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Now you use a simple aspect that randomly selects among doing nothing, sleeping, or yielding.")]),e._v(" "),a("p",[e._v("Or imagine that the ThreadJigglePoint class has two implementations. The first implements jiggle to do nothing and is used in production. The second generates a random number to choose between sleeping, yielding, or just falling through. If you run your tests a thousand times with random jiggling, you may root out some flaws. If the tests pass, at least you can say you’ve done due diligence. Though a bit simplistic, this could be a reasonable option in lieu of a more sophisticated tool.")]),e._v(" "),a("p",[e._v("There is a tool called ConTest,18 developed by IBM that does something similar, but it does so with quite a bit more sophistication.")]),e._v(" "),a("ol",{attrs:{start:"18"}},[a("li",[e._v("http://www.alphaworks.ibm.com/tech/contest")])]),e._v(" "),a("p",[e._v("The point is to jiggle the code so that threads run in different orderings at different times. The combination of well-written tests and jiggling can dramatically increase the chance finding errors.")]),e._v(" "),a("p",[e._v("Recommendation: Use jiggling strategies to ferret out errors.")]),e._v(" "),a("p",[e._v("CONCLUSION\nConcurrent code is difficult to get right. Code that is simple to follow can become nightmarish when multiple threads and shared data get into the mix. If you are faced with writing concurrent code, you need to write clean code with rigor or else face subtle and infrequent failures.")]),e._v(" "),a("p",[e._v("First and foremost, follow the Single Responsibility Principle. Break your system into POJOs that separate thread-aware code from thread-ignorant code. Make sure when you are testing your thread-aware code, you are only testing it and nothing else. This suggests that your thread-aware code should be small and focused.")]),e._v(" "),a("p",[e._v("Know the possible sources of concurrency issues: multiple threads operating on shared data, or using a common resource pool. Boundary cases, such as shutting down cleanly or finishing the iteration of a loop, can be especially thorny.")]),e._v(" "),a("p",[e._v("Learn your library and know the fundamental algorithms. Understand how some of the features offered by the library support solving problems similar to the fundamental algorithms.")]),e._v(" "),a("p",[e._v("Learn how to find regions of code that must be locked and lock them. Do not lock regions of code that do not need to be locked. Avoid calling one locked section from another. This requires a deep understanding of whether something is or is not shared. Keep the amount of shared objects and the scope of the sharing as narrow as possible. Change designs of the objects with shared data to accommodate clients rather than forcing clients to manage shared state.")]),e._v(" "),a("p",[e._v("Issues will crop up. The ones that do not crop up early are often written off as a onetime occurrence. These so-called one-offs typically only happen under load or at seemingly random times. Therefore, you need to be able to run your thread-related code in many configurations on many platforms repeatedly and continuously. Testability, which comes naturally from following the Three Laws of TDD, implies some level of plug-ability, which offers the support necessary to run code in a wider range of configurations.")]),e._v(" "),a("p",[e._v("You will greatly improve your chances of finding erroneous code if you take the time to instrument your code. You can either do so by hand or using some kind of automated technology. Invest in this early. You want to be running your thread-based code as long as possible before you put it into production.")]),e._v(" "),a("p",[e._v("If you take a clean approach, your chances of getting it right increase drastically.")])])}),[],!1,null,null,null);t.default=s.exports}}]);